{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","agregarCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","onSubmit","preventDefault","trim","id","uuid","type","placeholder","className","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","c","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4f623bdb.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport uuid from 'uuid/v4'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({agregarCita}) => {\r\n\r\n    //Arranca vacio porque se va agregando a medida que el usuario ingresa\r\n    const [ cita, setCita ] = useState({\r\n         mascota: '',\r\n         propietario: '',\r\n         fecha: '',\r\n         hora: '',\r\n         sintomas: ''\r\n     })\r\n\r\n    const [ error, setError ] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        setCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n     }\r\n\r\n    const {mascota,propietario,fecha,hora,sintomas } = cita;\r\n\r\n    const submitCita = (e) => {\r\n        e.preventDefault(); //Evita que lo envia por GET\r\n\r\n        //Validacion\r\n        if(     mascota.trim() === ''\r\n             || propietario.trim() === ''\r\n             || fecha.trim() === ''\r\n             || hora.trim() === ''\r\n             || sintomas.trim() === ''\r\n            ){\r\n                setError(true);\r\n                return;\r\n        }\r\n\r\n        setError(false); //Para cuando dsp lo completo OK\r\n\r\n        //Asignacion de ID (key)\r\n        cita.id = uuid(); //key\r\n\r\n        //Crear la cita -> state del componente principal (App)\r\n        agregarCita(cita);\r\n\r\n        //Reiniciar el format\r\n        setCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n \r\n\r\n    return ( \r\n        <Fragment>\r\n\r\n            <h2> CREAR CITA </h2>\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    placeholder=\"Nombre de la mascota\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={mascota}\r\n                />\r\n\r\n                <label>Nombre Due침o</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    placeholder=\"Nombre del Due침o\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={hora}\r\n                />           \r\n\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    type=\"text\"\r\n                    name=\"sintomas\"\r\n                    placeholder=\"Descripcion de la situacion\"\r\n                    className=\"u-full-width\"\r\n                    onChange={handleChange}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Enviar</button>\r\n\r\n                { error ? <p className = \"alerta-error\"> Todos los campos son obligatorios </p> : null}\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n     );\r\n\r\n}\r\n\r\n//Una forma de hacer check types\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cita = ({cita,eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{cita.mascota}</span></p>\r\n            <p>Due침o: <span>{cita.propietario}</span></p>\r\n            <p>Turno: <span>{cita.fecha} - {cita.hora}</span></p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n            <button\r\n                className=\"button eliminar u-full-width\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;</button>\r\n        </div>\r\n     );\r\n}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarcita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita'\n\nfunction App() {\n\n//Local storage (cuando arranca el programa)\nlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\nif(!citasIniciales){\n  citasIniciales = []; \n} //Si no hay citas, es una colecci칩n vacia\n\nconst [ citas, setCitas ] = useState(citasIniciales);\n\n// Se ejecuta al cargar y cuando hay cambios en el componente\nuseEffect( () => {\n  if(citasIniciales){\n    localStorage.setItem('citas',JSON.stringify(citas))\n  } else { //Si no hay citas iniciales\n    localStorage.setItem('citas',JSON.stringify([]))\n  }\n}, [citas,citasIniciales]) //Ejecuta cada vez que citas cambie\n\nconst agregarCita = cita => {\n    setCitas([\n      ...citas,\n      cita\n    ])\n}\n\nconst eliminarCita = id => {\n  const nuevasCitas = citas.filter(c => c.id !== id);\n  setCitas(nuevasCitas);\n}\n\nconst titulo = citas.length === 0 ? 'NO HAY CITAS' : 'CITAS AGENDADAS'\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">  \n        <div className=\"row\">\n\n          <div className=\"one-half column\">\n            <Formulario \n                agregarCita={agregarCita}\n            />\n          </div>\n\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}